//
// File generated by rootcint at Fri Oct 11 13:40:52 2013

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME frameworkdIbuilddIrapidfit_dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "rapidfit_dict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void RapidRun_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_RapidRun(void *p = 0);
   static void *newArray_RapidRun(Long_t size, void *p);
   static void delete_RapidRun(void *p);
   static void deleteArray_RapidRun(void *p);
   static void destruct_RapidRun(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::RapidRun*)
   {
      ::RapidRun *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::RapidRun >(0);
      static ::ROOT::TGenericClassInfo 
         instance("RapidRun", ::RapidRun::Class_Version(), "./framework/include/RapidRun.h", 22,
                  typeid(::RapidRun), DefineBehavior(ptr, ptr),
                  &::RapidRun::Dictionary, isa_proxy, 4,
                  sizeof(::RapidRun) );
      instance.SetNew(&new_RapidRun);
      instance.SetNewArray(&newArray_RapidRun);
      instance.SetDelete(&delete_RapidRun);
      instance.SetDeleteArray(&deleteArray_RapidRun);
      instance.SetDestructor(&destruct_RapidRun);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::RapidRun*)
   {
      return GenerateInitInstanceLocal((::RapidRun*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RapidRun*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *RapidRun::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *RapidRun::Class_Name()
{
   return "RapidRun";
}

//______________________________________________________________________________
const char *RapidRun::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::RapidRun*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RapidRun::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::RapidRun*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RapidRun::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::RapidRun*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RapidRun::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::RapidRun*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void RapidRun::Streamer(TBuffer &R__b)
{
   // Stream an object of class RapidRun.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(RapidRun::Class(),this);
   } else {
      R__b.WriteClassBuffer(RapidRun::Class(),this);
   }
}

//______________________________________________________________________________
void RapidRun::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class RapidRun.
      TClass *R__cl = ::RapidRun::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "args", (void*)&args);
      R__insp.InspectMember("auto_ptr<TList>", (void*)&args, "args.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_RapidRun(void *p) {
      return  p ? new(p) ::RapidRun : new ::RapidRun;
   }
   static void *newArray_RapidRun(Long_t nElements, void *p) {
      return p ? new(p) ::RapidRun[nElements] : new ::RapidRun[nElements];
   }
   // Wrapper around operator delete
   static void delete_RapidRun(void *p) {
      delete ((::RapidRun*)p);
   }
   static void deleteArray_RapidRun(void *p) {
      delete [] ((::RapidRun*)p);
   }
   static void destruct_RapidRun(void *p) {
      typedef ::RapidRun current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::RapidRun

/********************************************************
* framework/build/rapidfit_dict.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablerapidfit_dict();

extern "C" void G__set_cpp_environmentrapidfit_dict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("framework/include/AcceptReject.h");
  G__add_compiledheader("framework/include/AngularAcceptance.h");
  G__add_compiledheader("framework/include/BasePDF.h");
  G__add_compiledheader("framework/include/BasePDF_Framework.h");
  G__add_compiledheader("framework/include/BasePDF_MCCaching.h");
  G__add_compiledheader("framework/include/Blinder.h");
  G__add_compiledheader("framework/include/ClassLookUp.h");
  G__add_compiledheader("framework/include/CombinedMistagCalib.h");
  G__add_compiledheader("framework/include/ComponentPlotter.h");
  G__add_compiledheader("framework/include/ComponentPlotter_config.h");
  G__add_compiledheader("framework/include/ComponentRef.h");
  G__add_compiledheader("framework/include/ConstraintFunction.h");
  G__add_compiledheader("framework/include/CorrectedCovariance.h");
  G__add_compiledheader("framework/include/DataPoint.h");
  G__add_compiledheader("framework/include/DataSetConfiguration.h");
  G__add_compiledheader("framework/include/DebugClass.h");
  G__add_compiledheader("framework/include/DoubleFixedResModel.h");
  G__add_compiledheader("framework/include/DoubleResolutionModel.h");
  G__add_compiledheader("framework/include/EdStyle.h");
  G__add_compiledheader("framework/include/ExternalConstraint.h");
  G__add_compiledheader("framework/include/FitAssembler.h");
  G__add_compiledheader("framework/include/FitFunction.h");
  G__add_compiledheader("framework/include/FitFunctionConfiguration.h");
  G__add_compiledheader("framework/include/FitResult.h");
  G__add_compiledheader("framework/include/FitResultVector.h");
  G__add_compiledheader("framework/include/FixedResolutionModel.h");
  G__add_compiledheader("framework/include/Foam.h");
  G__add_compiledheader("framework/include/FoamIntegrator.h");
  G__add_compiledheader("framework/include/FumiliFunction.h");
  G__add_compiledheader("framework/include/FumiliWrapper.h");
  G__add_compiledheader("framework/include/FunctionContour.h");
  G__add_compiledheader("framework/include/GoodnessOfFit.h");
  G__add_compiledheader("framework/include/IConstraint.h");
  G__add_compiledheader("framework/include/IDataGenerator.h");
  G__add_compiledheader("framework/include/IDataSet.h");
  G__add_compiledheader("framework/include/IFitFunction.h");
  G__add_compiledheader("framework/include/IMinimiser.h");
  G__add_compiledheader("framework/include/IMistagCalib.h");
  G__add_compiledheader("framework/include/InputParsing.h");
  G__add_compiledheader("framework/include/IntegratorFunction.h");
  G__add_compiledheader("framework/include/IPDF.h");
  G__add_compiledheader("framework/include/IPDF_Framework.h");
  G__add_compiledheader("framework/include/IPDF_MCCaching.h");
  G__add_compiledheader("framework/include/IPDF_NormalisationCaching.h");
  G__add_compiledheader("framework/include/IPrecalculator.h");
  G__add_compiledheader("framework/include/IResolutionModel.h");
  G__add_compiledheader("framework/include/IStudy.h");
  G__add_compiledheader("framework/include/JackKnife.h");
  G__add_compiledheader("framework/include/JPsiPhiDataGenerator.h");
  G__add_compiledheader("framework/include/main.h");
  G__add_compiledheader("framework/include/MakeFoam.h");
  G__add_compiledheader("framework/include/Mathematics.h");
  G__add_compiledheader("framework/include/MCStudy.h");
  G__add_compiledheader("framework/include/MemoryDataSet.h");
  G__add_compiledheader("framework/include/MinimiserConfiguration.h");
  G__add_compiledheader("framework/include/Minuit2Function.h");
  G__add_compiledheader("framework/include/Minuit2Wrapper.h");
  G__add_compiledheader("framework/include/MinuitWrapper.h");
  G__add_compiledheader("framework/include/MultiThreadedFunctions.h");
  G__add_compiledheader("framework/include/NegativeLogLikelihood.h");
  G__add_compiledheader("framework/include/NegativeLogLikelihoodNumerical.h");
  G__add_compiledheader("framework/include/NegativeLogLikelihoodOpenMP.h");
  G__add_compiledheader("framework/include/NegativeLogLikelihoodThreaded.h");
  G__add_compiledheader("framework/include/NegativeLogLikelihoodThreadedNew.h");
  G__add_compiledheader("framework/include/NormalisedSumPDF.h");
  G__add_compiledheader("framework/include/Observable.h");
  G__add_compiledheader("framework/include/ObservableContinuousConstraint.h");
  G__add_compiledheader("framework/include/ObservableDiscreteConstraint.h");
  G__add_compiledheader("framework/include/ObservableRef.h");
  G__add_compiledheader("framework/include/OutputConfiguration.h");
  G__add_compiledheader("framework/include/ParameterSet.h");
  G__add_compiledheader("framework/include/ParseCommandLine.h");
  G__add_compiledheader("framework/include/PDFConfigurator.h");
  G__add_compiledheader("framework/include/PDFWithData.h");
  G__add_compiledheader("framework/include/PerEventAngularAcceptance.h");
  G__add_compiledheader("framework/include/PerEventResModel.h");
  G__add_compiledheader("framework/include/PhaseSpaceBoundary.h");
  G__add_compiledheader("framework/include/PhysicsBottle.h");
  G__add_compiledheader("framework/include/PhysicsParameter.h");
  G__add_compiledheader("framework/include/PrecalculatorConfig.h");
  G__add_compiledheader("framework/include/ProdPDF.h");
  G__add_compiledheader("framework/include/PseudoObservable.h");
  G__add_compiledheader("framework/include/RapidFitConfiguration.h");
  G__add_compiledheader("framework/include/RapidFitIntegrator.h");
  G__add_compiledheader("framework/include/RapidFitIntegratorConfig.h");
  G__add_compiledheader("framework/include/RapidFitMatrix.h");
  G__add_compiledheader("framework/include/RapidRun.h");
  G__add_compiledheader("framework/include/ResolutionModel.h");
  G__add_compiledheader("framework/include/ResultFormatter.h");
  G__add_compiledheader("framework/include/ResultParameter.h");
  G__add_compiledheader("framework/include/ResultParameterSet.h");
  G__add_compiledheader("framework/include/ScanParam.h");
  G__add_compiledheader("framework/include/ScanStudies.h");
  G__add_compiledheader("framework/include/SimpleMistagCalib.h");
  G__add_compiledheader("framework/include/SlicedAcceptance.h");
  G__add_compiledheader("framework/include/StatisticsFunctions.h");
  G__add_compiledheader("framework/include/StringProcessing.h");
  G__add_compiledheader("framework/include/SumPDF.h");
  G__add_compiledheader("framework/include/SWeightPrecalculator.h");
  G__add_compiledheader("framework/include/Threading.h");
  G__add_compiledheader("framework/include/ThreadingConfig.h");
  G__add_compiledheader("framework/include/ToyStudy.h");
  G__add_compiledheader("framework/include/TripleFixedResModel.h");
  G__add_compiledheader("framework/include/VectoredFeldmanCousins.h");
  G__add_compiledheader("framework/include/XMLConfigReader.h");
  G__add_compiledheader("framework/include/XMLTag.h");
  G__add_compiledheader("pdfs/include/Bd2JpsiKstar_sWave.h");
  G__add_compiledheader("pdfs/include/Bd2JpsiKstar_sWave_Fs.h");
  G__add_compiledheader("pdfs/include/Bd2JpsiKstar_sWave_Fs_withAcc.h");
  G__add_compiledheader("pdfs/include/Bd2JpsiKstar_sWave_Fscopy.h");
  G__add_compiledheader("pdfs/include/Bd2JpsiKstar_sWave_KpiBins.h");
  G__add_compiledheader("pdfs/include/Bd2JpsiKstar_sWave_rTerms.h");
  G__add_compiledheader("pdfs/include/Bd2JpsiKstar_withTimeRes_withAverageAngAcc.h");
  G__add_compiledheader("pdfs/include/Bd2JpsiKstar_withTimeRes_withAverageAngAcc_rTerms.h");
  G__add_compiledheader("pdfs/include/BoxPDF.h");
  G__add_compiledheader("pdfs/include/Bs2DsPi.h");
  G__add_compiledheader("pdfs/include/Bs2DsPi_acc.h");
  G__add_compiledheader("pdfs/include/Bs2DsPi_lowmassbkg.h");
  G__add_compiledheader("pdfs/include/Bs2DsPi_lowmassbkg_updated.h");
  G__add_compiledheader("pdfs/include/Bs2DsPi_mistagParameter.h");
  G__add_compiledheader("pdfs/include/Bs2DsPiBkg_withTimeRes.h");
  G__add_compiledheader("pdfs/include/Bs2DsPiMassSignal.h");
  G__add_compiledheader("pdfs/include/Bs2Jpsifzero_Signal_v5.h");
  G__add_compiledheader("pdfs/include/Bs2Jpsifzero_Signal_v5_forcombined.h");
  G__add_compiledheader("pdfs/include/Bs2Jpsifzero_Signal_v5a.h");
  G__add_compiledheader("pdfs/include/Bs2Jpsifzero_Signal_v6.h");
  G__add_compiledheader("pdfs/include/Bs2Jpsifzero_SignalAlt_BaseClass_dev.h");
  G__add_compiledheader("pdfs/include/Bs2Jpsifzero_SignalAlt_MO_dev.h");
  G__add_compiledheader("pdfs/include/Bs2Jpsifzero_SignalAlt_MP_dev.h");
  G__add_compiledheader("pdfs/include/Bs2JpsiPhi_Angluar_Terms.h");
  G__add_compiledheader("pdfs/include/Bs2JpsiPhi_Signal_v5.h");
  G__add_compiledheader("pdfs/include/Bs2JpsiPhi_Signal_v5_old.h");
  G__add_compiledheader("pdfs/include/Bs2JpsiPhi_Signal_v6.h");
  G__add_compiledheader("pdfs/include/Bs2JpsiPhi_SignalAlt_BaseClass_1angle_v4.h");
  G__add_compiledheader("pdfs/include/Bs2JpsiPhi_SignalAlt_MO_1angle_v4.h");
  G__add_compiledheader("pdfs/include/Bs2JpsiPhi_SignalAlt_MO_v4.h");
  G__add_compiledheader("pdfs/include/Bs2JpsiPhiLongLivedBkg.h");
  G__add_compiledheader("pdfs/include/Bs2JpsiPhiLongLivedBkg_II.h");
  G__add_compiledheader("pdfs/include/Bs2JpsiPhiLongLivedBkg_withTimeRes.h");
  G__add_compiledheader("pdfs/include/Bs2JpsiPhiLongLivedBkg_withTimeRes_withAngDist.h");
  G__add_compiledheader("pdfs/include/Bs2JpsiPhiMassBkg.h");
  G__add_compiledheader("pdfs/include/Bs2JpsiPhiMassBkgLL.h");
  G__add_compiledheader("pdfs/include/Bs2JpsiPhiMassSignal.h");
  G__add_compiledheader("pdfs/include/Bs2JpsiPhiPromptBkg_tripleGaussian.h");
  G__add_compiledheader("pdfs/include/Bs2JpsiPhiPromptBkg_withTimeRes.h");
  G__add_compiledheader("pdfs/include/Bs2JpsiPhiPromptBkg_withTimeResDouble.h");
  G__add_compiledheader("pdfs/include/Bs2PhiPhi.h");
  G__add_compiledheader("pdfs/include/BsMass.h");
  G__add_compiledheader("pdfs/include/CrystalBall.h");
  G__add_compiledheader("pdfs/include/DoubleExponential.h");
  G__add_compiledheader("pdfs/include/DPBackground.h");
  G__add_compiledheader("pdfs/include/DPHistoBackground.h");
  G__add_compiledheader("pdfs/include/DPTotalAmplitudePDF.h");
  G__add_compiledheader("pdfs/include/DPTotalAmplitudePDF_withAcc.h");
  G__add_compiledheader("pdfs/include/DPTotalAmplitudePDF_withAcc_withBkg.h");
  G__add_compiledheader("pdfs/include/Exponential.h");
  G__add_compiledheader("pdfs/include/ExponentialWithDeltaGamma.h");
  G__add_compiledheader("pdfs/include/FlatPDF.h");
  G__add_compiledheader("pdfs/include/GammaDistribution.h");
  G__add_compiledheader("pdfs/include/Landau.h");
  G__add_compiledheader("pdfs/include/LandauGauss.h");
  G__add_compiledheader("pdfs/include/LogNormalDistribution.h");
  G__add_compiledheader("pdfs/include/LongLivedBkg.h");
  G__add_compiledheader("pdfs/include/LongLivedBkg_3Dangular.h");
  G__add_compiledheader("pdfs/include/MistagDistribution.h");
  G__add_compiledheader("pdfs/include/Novosibirsk.h");
  G__add_compiledheader("pdfs/include/OptimisedDoubleGauss.h");
  G__add_compiledheader("pdfs/include/OptimisedGauss.h");
  G__add_compiledheader("pdfs/include/PerEventErrorHistogram.h");
  G__add_compiledheader("pdfs/include/PolyPDF.h");
  G__add_compiledheader("pdfs/include/RapidFit_Pdf_Exponential.h");
  G__add_compiledheader("pdfs/include/SimpleDoubleGauss.h");
  G__add_compiledheader("pdfs/include/SimpleGauss.h");
  G__add_compiledheader("pdfs/include/SimpleGauss2D.h");
  G__add_compiledheader("pdfs/include/SimpleGauss3D.h");
  G__add_compiledheader("pdfs/include/SingleGauss.h");
  G__add_compiledheader("pdfs/include/Sinusoid.h");
  G__add_compiledheader("pdfs/include/StudentT.h");
  G__add_compiledheader("pdfs/include/TemplatePDF.h");
  G__add_compiledheader("pdfs/include/WrongPVAssocBkg.h");
  G__add_compiledheader("pdfs/dalitz/include/CalculateAngles.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPBarrierFactor.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPBarrierL0.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPBarrierL1.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPBarrierL2.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPBarrierL3.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPBarrierL4.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPBarrierL5.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPBWResonanceShape.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPComponent.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPGLassShape.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPHelpers.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPJpsiKaon.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPLassShape.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPMassShape.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPNonresonant.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPTotalAmplitude.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPWignerFunction.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPWignerFunctionGeneral.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPWignerFunctionJ0.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPWignerFunctionJ1.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPWignerFunctionJ1over2.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPWignerFunctionJ2.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPWignerFunctionJ3over2.hh");
  G__add_compiledheader("pdfs/dalitz/include/DPZplusK.hh");
  G__cpp_reset_tagtablerapidfit_dict();
}
#include <new>
extern "C" int G__cpp_dllrevrapidfit_dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* RapidRun */
static int G__rapidfit_dict_1397_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RapidRun* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RapidRun[n];
     } else {
       p = new((void*) gvp) RapidRun[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RapidRun;
     } else {
       p = new((void*) gvp) RapidRun;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rapidfit_dictLN_RapidRun));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rapidfit_dict_1397_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RapidRun* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new RapidRun((TList*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) RapidRun((TList*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rapidfit_dictLN_RapidRun));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rapidfit_dict_1397_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RapidRun*) G__getstructoffset())->run());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rapidfit_dict_1397_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      RapidRun::setGridification((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rapidfit_dict_1397_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) RapidRun::isGridified());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rapidfit_dict_1397_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) RapidRun::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rapidfit_dict_1397_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RapidRun::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rapidfit_dict_1397_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) RapidRun::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rapidfit_dict_1397_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      RapidRun::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rapidfit_dict_1397_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RapidRun*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rapidfit_dict_1397_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RapidRun::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rapidfit_dict_1397_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RapidRun::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rapidfit_dict_1397_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RapidRun::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rapidfit_dict_1397_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RapidRun::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__rapidfit_dict_1397_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RapidRun* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RapidRun(*(RapidRun*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rapidfit_dictLN_RapidRun));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RapidRun G__TRapidRun;
static int G__rapidfit_dict_1397_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RapidRun*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RapidRun*) (soff+(sizeof(RapidRun)*i)))->~G__TRapidRun();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RapidRun*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RapidRun*) (soff))->~G__TRapidRun();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__rapidfit_dict_1397_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RapidRun* dest = (RapidRun*) G__getstructoffset();
   *dest = *(RapidRun*) libp->para[0].ref;
   const RapidRun& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* RapidRun */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncrapidfit_dict {
 public:
  G__Sizep2memfuncrapidfit_dict(): p(&G__Sizep2memfuncrapidfit_dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncrapidfit_dict::*p)();
};

size_t G__get_sizep2memfuncrapidfit_dict()
{
  G__Sizep2memfuncrapidfit_dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancerapidfit_dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__rapidfit_dictLN_RapidRun))) {
     RapidRun *G__Lderived;
     G__Lderived=(RapidRun*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__rapidfit_dictLN_RapidRun),G__get_linked_tagnum(&G__rapidfit_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablerapidfit_dict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* RapidRun */
static void G__setup_memvarRapidRun(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rapidfit_dictLN_RapidRun));
   { RapidRun *p; p=(RapidRun*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__rapidfit_dictLN_auto_ptrlETListgR),-1,-1,4,"args=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-2,4,"runningOnGrid=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__rapidfit_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarrapidfit_dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncRapidRun(void) {
   /* RapidRun */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rapidfit_dictLN_RapidRun));
   G__memfunc_setup("RapidRun",805,G__rapidfit_dict_1397_0_1, 105, G__get_linked_tagnum(&G__rapidfit_dictLN_RapidRun), -1, 0, 0, 1, 1, 0, "", "needed by Root IO", (void*) NULL, 0);
   G__memfunc_setup("RapidRun",805,G__rapidfit_dict_1397_0_2, 105, G__get_linked_tagnum(&G__rapidfit_dictLN_RapidRun), -1, 0, 1, 1, 1, 0, "U 'TList' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("run",341,G__rapidfit_dict_1397_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGridification",1672,G__rapidfit_dict_1397_0_4, 121, -1, -1, 0, 1, 3, 1, 0, "g - - 0 - input", (char*)NULL, (void*) G__func2void( (void (*)(bool))(&RapidRun::setGridification) ), 0);
   G__memfunc_setup("isGridified",1123,G__rapidfit_dict_1397_0_5, 103, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (bool (*)())(&RapidRun::isGridified) ), 0);
   G__memfunc_setup("Class",502,G__rapidfit_dict_1397_0_6, 85, G__get_linked_tagnum(&G__rapidfit_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&RapidRun::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__rapidfit_dict_1397_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RapidRun::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__rapidfit_dict_1397_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&RapidRun::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__rapidfit_dict_1397_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&RapidRun::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__rapidfit_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__rapidfit_dict_1397_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__rapidfit_dict_1397_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RapidRun::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__rapidfit_dict_1397_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RapidRun::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__rapidfit_dict_1397_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RapidRun::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__rapidfit_dict_1397_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RapidRun::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("RapidRun", 805, G__rapidfit_dict_1397_0_18, (int) ('i'), G__get_linked_tagnum(&G__rapidfit_dictLN_RapidRun), -1, 0, 1, 1, 1, 0, "u 'RapidRun' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RapidRun", 931, G__rapidfit_dict_1397_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__rapidfit_dict_1397_0_20, (int) ('u'), G__get_linked_tagnum(&G__rapidfit_dictLN_RapidRun), -1, 1, 1, 1, 1, 0, "u 'RapidRun' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncrapidfit_dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {
}

static void G__cpp_setup_global7() {
}

static void G__cpp_setup_global8() {
}

static void G__cpp_setup_global9() {
}

static void G__cpp_setup_global10() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalrapidfit_dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
  G__cpp_setup_global7();
  G__cpp_setup_global8();
  G__cpp_setup_global9();
  G__cpp_setup_global10();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {
}

static void G__cpp_setup_func31() {
}

static void G__cpp_setup_func32() {
}

static void G__cpp_setup_func33() {
}

static void G__cpp_setup_func34() {
}

static void G__cpp_setup_func35() {
}

static void G__cpp_setup_func36() {
}

static void G__cpp_setup_func37() {
}

static void G__cpp_setup_func38() {
}

static void G__cpp_setup_func39() {
}

static void G__cpp_setup_func40() {
}

static void G__cpp_setup_func41() {
}

static void G__cpp_setup_func42() {
}

static void G__cpp_setup_func43() {
}

static void G__cpp_setup_func44() {
}

static void G__cpp_setup_func45() {
}

static void G__cpp_setup_func46() {
}

static void G__cpp_setup_func47() {
}

static void G__cpp_setup_func48() {
}

static void G__cpp_setup_func49() {
}

static void G__cpp_setup_func50() {
}

static void G__cpp_setup_func51() {
}

static void G__cpp_setup_func52() {
}

static void G__cpp_setup_func53() {
}

static void G__cpp_setup_func54() {
}

static void G__cpp_setup_func55() {
}

static void G__cpp_setup_func56() {
}

static void G__cpp_setup_func57() {
}

static void G__cpp_setup_func58() {
}

static void G__cpp_setup_func59() {
}

static void G__cpp_setup_func60() {
}

static void G__cpp_setup_func61() {
}

static void G__cpp_setup_func62() {
}

static void G__cpp_setup_func63() {
}

static void G__cpp_setup_func64() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcrapidfit_dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
  G__cpp_setup_func31();
  G__cpp_setup_func32();
  G__cpp_setup_func33();
  G__cpp_setup_func34();
  G__cpp_setup_func35();
  G__cpp_setup_func36();
  G__cpp_setup_func37();
  G__cpp_setup_func38();
  G__cpp_setup_func39();
  G__cpp_setup_func40();
  G__cpp_setup_func41();
  G__cpp_setup_func42();
  G__cpp_setup_func43();
  G__cpp_setup_func44();
  G__cpp_setup_func45();
  G__cpp_setup_func46();
  G__cpp_setup_func47();
  G__cpp_setup_func48();
  G__cpp_setup_func49();
  G__cpp_setup_func50();
  G__cpp_setup_func51();
  G__cpp_setup_func52();
  G__cpp_setup_func53();
  G__cpp_setup_func54();
  G__cpp_setup_func55();
  G__cpp_setup_func56();
  G__cpp_setup_func57();
  G__cpp_setup_func58();
  G__cpp_setup_func59();
  G__cpp_setup_func60();
  G__cpp_setup_func61();
  G__cpp_setup_func62();
  G__cpp_setup_func63();
  G__cpp_setup_func64();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__rapidfit_dictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__rapidfit_dictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__rapidfit_dictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__rapidfit_dictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__rapidfit_dictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__rapidfit_dictLN_RapidRun = { "RapidRun" , 99 , -1 };
G__linked_taginfo G__rapidfit_dictLN_auto_ptrlETListgR = { "auto_ptr<TList>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablerapidfit_dict() {
  G__rapidfit_dictLN_TClass.tagnum = -1 ;
  G__rapidfit_dictLN_TBuffer.tagnum = -1 ;
  G__rapidfit_dictLN_TMemberInspector.tagnum = -1 ;
  G__rapidfit_dictLN_TObject.tagnum = -1 ;
  G__rapidfit_dictLN_TList.tagnum = -1 ;
  G__rapidfit_dictLN_RapidRun.tagnum = -1 ;
  G__rapidfit_dictLN_auto_ptrlETListgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablerapidfit_dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__rapidfit_dictLN_TClass);
   G__get_linked_tagnum_fwd(&G__rapidfit_dictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__rapidfit_dictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__rapidfit_dictLN_TObject);
   G__get_linked_tagnum_fwd(&G__rapidfit_dictLN_TList);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__rapidfit_dictLN_RapidRun),sizeof(RapidRun),-1,323840,"Needed for Cint",G__setup_memvarRapidRun,G__setup_memfuncRapidRun);
   G__get_linked_tagnum_fwd(&G__rapidfit_dictLN_auto_ptrlETListgR);
}
extern "C" void G__cpp_setuprapidfit_dict(void) {
  G__check_setup_version(30051515,"G__cpp_setuprapidfit_dict()");
  G__set_cpp_environmentrapidfit_dict();
  G__cpp_setup_tagtablerapidfit_dict();

  G__cpp_setup_inheritancerapidfit_dict();

  G__cpp_setup_typetablerapidfit_dict();

  G__cpp_setup_memvarrapidfit_dict();

  G__cpp_setup_memfuncrapidfit_dict();
  G__cpp_setup_globalrapidfit_dict();
  G__cpp_setup_funcrapidfit_dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncrapidfit_dict();
  return;
}
class G__cpp_setup_initrapidfit_dict {
  public:
    G__cpp_setup_initrapidfit_dict() { G__add_setup_func("rapidfit_dict",(G__incsetup)(&G__cpp_setuprapidfit_dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initrapidfit_dict() { G__remove_setup_func("rapidfit_dict"); }
};
G__cpp_setup_initrapidfit_dict G__cpp_setup_initializerrapidfit_dict;

